<?xml-stylesheet type='text/xsl' href='static/typelib2xml.xsl'?>
<TypeLibrary name="jN"><documentation>jN is a Notepad++ plugin. It helps you to script your favorite Text editor with your favorite programming language!</documentation><type name="IMenuItem"><impl name="IDispatch"/><documentation>Represents a menu item with command.</documentation><function name="text" invoke_kind="propertyget"><documentation>Text of menu item</documentation><param name="result" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="text" invoke_kind="propertyput"><documentation>Text of menu item</documentation><param name="result" kind="required" typedesc="VT_BSTR"><in/></param></function><function name="checked" invoke_kind="propertyget"><documentation>Value indicating whether a check mark appears next to the text of the menu item.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><out/><retval/></param></function><function name="checked" invoke_kind="propertyput"><documentation>Value indicating whether a check mark appears next to the text of the menu item.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><in/></param></function><function name="disabled" invoke_kind="propertyget"><documentation>Value indicating whether the menu item can respond to user interaction.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><out/><retval/></param></function><function name="disabled" invoke_kind="propertyput"><documentation>Value indicating whether the menu item can respond to user interaction.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><in/></param></function><function name="remove" invoke_kind="func"><documentation>Removes the menu item from it's parent.</documentation></function></type><type name="IMenu"><impl name="IMenuItem"/><documentation>Represents a submenu.</documentation><function name="addMenu" invoke_kind="func"><documentation>Appends a new menu and returns its. cfg = {text:'my menu', oninitpopup:function(){}}</documentation><param name="cfg" kind="required" typedesc="VT_VARIANT"><in/></param><param name="result" kind="required" typedesc="IMenu"><out/><retval/></param></function><function name="addItem" invoke_kind="func"><documentation>Appends a new menu item to the menu. Returns new menu item object. cfg = {text:'My Menu', cmd:function(){}}</documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param><param name="result" kind="required" typedesc="IMenuItem"><out/><retval/></param></function><function name="addSeparator" invoke_kind="func"><documentation>Appends a separator to the menu.</documentation></function></type><type name="ICtxMenu"><impl name="IDispatch"/><documentation>Represents a context menu.</documentation><function name="addMenu" invoke_kind="func"><documentation>Appends a new menu and returns its. cfg = {text:'my menu', oninitpopup:function(){}}</documentation><param name="cfg" kind="required" typedesc="VT_VARIANT"><in/></param><param name="result" kind="required" typedesc="IMenu"><out/><retval/></param></function><function name="addItem" invoke_kind="func"><documentation>Appends a new menu item to the menu. Returns new menu item object. cfg = {text:'My Menu', cmd:function(){}}</documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param><param name="result" kind="required" typedesc="IMenuItem"><out/><retval/></param></function><function name="addSeparator" invoke_kind="func"><documentation>Appends a separator to the menu.</documentation></function><function name="show" invoke_kind="func"><documentation>Shows menu</documentation></function></type><type name="IDialog"><impl name="IDispatch"/><documentation>Represents a HTML based dialog window.</documentation><function name="visible" invoke_kind="propertyget"><documentation>Value indicating whether the dialog is visible.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><out/><retval/></param></function><function name="visible" invoke_kind="propertyput"><documentation>Value indicating whether the dialog is visible.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><in/></param></function><function name="height" invoke_kind="propertyget"><documentation>Height of dialog window.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="height" invoke_kind="propertyput"><documentation>Height of dialog window.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="width" invoke_kind="propertyget"><documentation>Width of dialog window.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="width" invoke_kind="propertyput"><documentation>Width of dialog window.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="clientHeight" invoke_kind="propertyget"><documentation>Height of client area of dialog window.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="clientHeight" invoke_kind="propertyput"><documentation>Height of client area of dialog window.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="clientWidth" invoke_kind="propertyget"><documentation>Width of client area of dialog window.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="clientWidth" invoke_kind="propertyput"><documentation>Width of client area of dialog window.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="top" invoke_kind="propertyget"><documentation>Distance, in pixels, between the top edge of the dialog window and the top edge of screen.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="top" invoke_kind="propertyput"><documentation>Distance, in pixels, between the top edge of the dialog window and the top edge of screen.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="left" invoke_kind="propertyget"><documentation>Distance, in pixels, between the left edge of the dialog window and the left edge of screen.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="left" invoke_kind="propertyput"><documentation>Distance, in pixels, between the left edge of the dialog window and the left edge of screen.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="title" invoke_kind="propertyget"><documentation>Title of the dialog window.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="title" invoke_kind="propertyput"><documentation>Title of the dialog window.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><in/></param></function><function name="document" invoke_kind="propertyget"><documentation>DOM Document that is the representation of client area of dialog window.</documentation><param name="result" kind="required" typedesc="VT_DISPATCH"><out/><retval/></param></function><function name="close" invoke_kind="func"><documentation>Hides and prepares the dialog window to be destroyed.</documentation></function><function name="handle" invoke_kind="propertyget"><documentation>Window handle of dialog.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="foreground" invoke_kind="func"><documentation>Sets window into the foreground and activates it.</documentation></function></type><type name="ILibrary"><impl name="IDispatch"/><documentation>Collection of methods to make calls of exported functions of specified dynamic-link library.</documentation><function name="alloc" invoke_kind="func"><documentation>Allocates specified number of bytes.</documentation><param name="number" kind="required" typedesc="VT_UINT"><in/></param><param name="dest" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="call" invoke_kind="func"><documentation>Calls specified function.</documentation><param name="functionName" kind="required" typedesc="VT_BSTR"><in/></param><param name="params" kind="required" typedesc="VT_BSTR"><in/></param><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="writeByte" invoke_kind="func"><documentation>Writes BYTE from value to dest beginning at pos.</documentation><param name="dest" kind="required" typedesc="VT_BSTR"><in/></param><param name="pos" kind="required" typedesc="VT_UINT"><in/></param><param name="value" kind="required" typedesc="VT_VARIANT"><in/></param></function><function name="writeWord" invoke_kind="func"><documentation>Writes WORD from value to dest beginning at pos.</documentation><param name="dest" kind="required" typedesc="VT_BSTR"><in/></param><param name="pos" kind="required" typedesc="VT_UINT"><in/></param><param name="value" kind="required" typedesc="VT_VARIANT"><in/></param></function><function name="writeDWord" invoke_kind="func"><documentation>Writes DWORD from value to dest beginning at pos.</documentation><param name="dest" kind="required" typedesc="VT_BSTR"><in/></param><param name="pos" kind="required" typedesc="VT_UINT"><in/></param><param name="value" kind="required" typedesc="VT_VARIANT"><in/></param></function><function name="writeInt64" invoke_kind="func"><documentation>Writes INT64 from value to dest beginning at pos.</documentation><param name="dest" kind="required" typedesc="VT_BSTR"><in/></param><param name="pos" kind="required" typedesc="VT_UINT"><in/></param><param name="value" kind="required" typedesc="VT_VARIANT"><in/></param></function><function name="readByte" invoke_kind="func"><documentation>Reads BYTE from src beginning at pos.</documentation><param name="src" kind="required" typedesc="VT_BSTR"><in/></param><param name="pos" kind="required" typedesc="VT_UINT"><in/></param><param name="result" kind="required" typedesc="VT_VARIANT"><out/><retval/></param></function><function name="readWord" invoke_kind="func"><documentation>Reads WORD from src beginning at pos.</documentation><param name="src" kind="required" typedesc="VT_BSTR"><in/></param><param name="pos" kind="required" typedesc="VT_UINT"><in/></param><param name="result" kind="required" typedesc="VT_VARIANT"><out/><retval/></param></function><function name="readDWord" invoke_kind="func"><documentation>Reads DWORD from src beginning at pos.</documentation><param name="src" kind="required" typedesc="VT_BSTR"><in/></param><param name="pos" kind="required" typedesc="VT_UINT"><in/></param><param name="result" kind="required" typedesc="VT_VARIANT"><out/><retval/></param></function><function name="readInt64" invoke_kind="func"><documentation>Reads INT64 from src beginning at pos.</documentation><param name="src" kind="required" typedesc="VT_BSTR"><in/></param><param name="pos" kind="required" typedesc="VT_UINT"><in/></param><param name="result" kind="required" typedesc="VT_VARIANT"><out/><retval/></param></function><function name="readBSTR" invoke_kind="func"><documentation>Reads (4 Bytes) from src beginning at pos and interprets it as BSTR.</documentation><param name="src" kind="required" typedesc="VT_BSTR"><in/></param><param name="pos" kind="required" typedesc="VT_UINT"><in/></param><param name="result" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="copy" invoke_kind="func"><documentation>Copies bytes from src to dest beginning at pos.</documentation><param name="dest" kind="required" typedesc="VT_BSTR"><in/></param><param name="destPos" kind="required" typedesc="VT_UINT"><in/></param><param name="src" kind="required" typedesc="VT_BSTR"><in/></param><param name="srcPos" kind="required" typedesc="VT_UINT"><in/></param><param name="size" kind="required" typedesc="VT_UINT"><in/></param></function></type><type name="ICallBack"><impl name="IDispatch"/><documentation>Represents one of 12 possible callback functions</documentation></type><type name="ISystem"><impl name="IDispatch"/><documentation>Collection of system functions. Methods of this interface are globally available. It means you can omit keyword 'System' to access to its methods.</documentation><function name="decodeFrom" invoke_kind="func"><documentation>Decodes source string encoded by codepage.</documentation><param name="codepage" kind="required" typedesc="VT_INT"><in/></param><param name="src" kind="required" typedesc="VT_BSTR"><in/></param><param name="dest" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="encodeTo" invoke_kind="func"><documentation>Encodes source string by codepage.</documentation><param name="codepage" kind="required" typedesc="VT_INT"><in/></param><param name="src" kind="required" typedesc="VT_BSTR"><in/></param><param name="result" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="addSystemHotKey" invoke_kind="func"><documentation>Adds new system wide hot key combination. cfg = {ctrl:true, shift:false, alt:true, key:'a', cmd: function(){}}. The cfg.key property can be a character or number. You find valid numbers (virtual-key codes) on <a href="http://goo.gl/XTFsh">MSDN</a></documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param></function><function name="createDialog" invoke_kind="func"><documentation>Creates new dialog window described by cfg object. cfg = {onbeforeclose:function(){return true; // or false for cancel }, onclose:function(){}}. See dialog.js for example.</documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param><param name="result" kind="required" typedesc="IDialog"><out/><retval/></param></function><function name="addIdleHandler" invoke_kind="func"><documentation>Adds new idle handler. The cmd callback function of cfg will be called once if the application has nothing to do. Be aware, what you do in a handle, it can lead to a deadlock.</documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param></function><function name="addScript" invoke_kind="func"><documentation>Runs the given javascript expression. Prefer this function to javascript's eval. It allows you to get the script position in case of errors.</documentation><param name="name" kind="optional" typedesc="VT_VARIANT"><in/><opt/></param></function><function name="setTimeout" invoke_kind="func"><documentation>Appends a new timer to the queue. cfg = {millis:1234, cmd:function(){}}</documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param></function><function name="clipBoard" invoke_kind="propertyget"><documentation>Text data on the Clipboard.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="clipBoard" invoke_kind="propertyput"><documentation>Text data on the Clipboard.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><in/></param></function><function name="loadLibrary" invoke_kind="func"><documentation>Loads given dll.</documentation><param name="libraryPath" kind="required" typedesc="VT_BSTR"><in/></param><param name="result" kind="required" typedesc="ILibrary"><out/><retval/></param></function><function name="registerCallBack" invoke_kind="func"><documentation>Registers cfg = {cmd:function(stackbuffer){}} as next callback function.It is possible to register only 12 callback functions at the same time.</documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param><param name="stacksize" kind="required" typedesc="VT_UINT"><in/></param><param name="result" kind="required" typedesc="ICallBack"><out/><retval/></param></function><function name="scriptFullName" invoke_kind="propertyget"><documentation>Full path of start script file.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="showNotification" invoke_kind="func"><documentation>Creates and shows user notification in system tray. cfg = {title='My Title', msg='long message'}</documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param></function></type><type name="IViewLine"><impl name="IDispatch"/><documentation>Represents line of View</documentation><function name="number" invoke_kind="propertyget"><documentation>Line number</documentation><param name="value" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="start" invoke_kind="propertyget"><documentation>Character position of line beginning in document</documentation><param name="value" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="end" invoke_kind="propertyget"><documentation>Character position of line end in document</documentation><param name="value" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="byteStart" invoke_kind="propertyget"><documentation>Byte position of line beginning. Faster than 'start' property.</documentation><param name="value" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="byteEnd" invoke_kind="propertyget"><documentation>Byte position of line end including any line end characters. Faster than 'end' property.</documentation><param name="value" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="text" invoke_kind="propertyget"><documentation>Line text including any line end characters. The setting of line text changes the text selection.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="text" invoke_kind="propertyput"><documentation>Line text including any line end characters. The setting of line text changes the text selection.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><in/></param></function></type><type name="IViewLines"><impl name="IDispatch"/><documentation>Represents lines of View</documentation><function name="get" invoke_kind="func"><documentation>Returns the line object with specified number.</documentation><param name="line" kind="required" typedesc="VT_INT"><in/></param><param name="result" kind="required" typedesc="IViewLine"><out/><retval/></param></function><function name="count" invoke_kind="propertyget"><documentation>The count of lines.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="current" invoke_kind="propertyget"><documentation>The current line of view.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="current" invoke_kind="propertyput"><documentation>The current line of view.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function></type><type name="IView"><impl name="IDispatch"/><documentation>Represents an editor view.</documentation><function name="text" invoke_kind="propertyget"><documentation>The text of view.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="text" invoke_kind="propertyput"><documentation>The text of view.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><in/></param></function><function name="files" invoke_kind="propertyget"><documentation>Array of the file names opened in the view.</documentation><param name="array" kind="required" typedesc="VT_DISPATCH"><out/><retval/></param></function><function name="file" invoke_kind="propertyget"><documentation>Current file in the view.</documentation><param name="value" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="file" invoke_kind="propertyput"><documentation>Current file in the view.</documentation><param name="value" kind="required" typedesc="VT_INT"><in/></param></function><function name="selection" invoke_kind="propertyget"><documentation>Selected text in the view.</documentation><param name="value" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="selection" invoke_kind="propertyput"><documentation>Selected text in the view.</documentation><param name="value" kind="required" typedesc="VT_BSTR"><in/></param></function><function name="codepage" invoke_kind="propertyget"><documentation>Code page of current file.</documentation><param name="value" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="codepage" invoke_kind="propertyput"><documentation>Code page of current file.</documentation><param name="value" kind="required" typedesc="VT_INT"><in/></param></function><function name="lang" invoke_kind="propertyget"><documentation>Language of the currently active document. It is an index in Editor.langs</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="lang" invoke_kind="propertyput"><documentation>Language of the currently active document. It is an index in Editor.langs</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="line" invoke_kind="propertyget"><documentation>The current line of view.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="line" invoke_kind="propertyput"><documentation>The current line of view.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="lines" invoke_kind="propertyget"><documentation>Lines object of view.</documentation><param name="result" kind="required" typedesc="IViewLines"><out/><retval/></param></function><function name="pos" invoke_kind="propertyget"><documentation>Character position in document.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="pos" invoke_kind="propertyput"><documentation>Character position in document.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="bytePos" invoke_kind="propertyget"><documentation>Byte position in document.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="bytePos" invoke_kind="propertyput"><documentation>Byte position in document.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="column" invoke_kind="propertyget"><documentation>Column position.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="anchor" invoke_kind="propertyget"><documentation>Character position of anchor.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="anchor" invoke_kind="propertyput"><documentation>Character position of anchor.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="byteAnchor" invoke_kind="propertyget"><documentation>Byte position of anchor.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="byteAnchor" invoke_kind="propertyput"><documentation>Byte position of anchor.</documentation><param name="result" kind="required" typedesc="VT_INT"><in/></param></function><function name="navBarHidden" invoke_kind="propertyget"><documentation>Value indicating whether the navigation bar is visible.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><out/><retval/></param></function><function name="navBarHidden" invoke_kind="propertyput"><documentation>Value indicating whether the navigation bar is visible.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><in/></param></function><function name="handle" invoke_kind="propertyget"><documentation>Window handle of view.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function></type><type name="IEditor"><impl name="IDispatch"/><documentation>Represents the Notepad++. Methods of this interface are globally available. It means you can omit keyword 'Editor' to access to its methods.</documentation><function name="firstView" invoke_kind="propertyget"><documentation>The always visible view of editor. It is the left view.</documentation><param name="result" kind="required" typedesc="IView"><out/><retval/></param></function><function name="currentView" invoke_kind="propertyget"><documentation>The view with currently active document.</documentation><param name="result" kind="required" typedesc="IView"><out/><retval/></param></function><function name="secondView" invoke_kind="propertyget"><documentation>The right view of editor.</documentation><param name="result" kind="required" typedesc="IView"><out/><retval/></param></function><function name="alert" invoke_kind="func"><documentation>Displays a dialog box containing an application-defined message.</documentation><param name="value" kind="required" typedesc="VT_BSTR"><in/></param></function><function name="saveAll" invoke_kind="func"><documentation>Saves all the opened files.</documentation></function><function name="langs" invoke_kind="propertyget"><documentation>Array of languages source code can be written in.</documentation><param name="result" kind="required" typedesc="VT_DISPATCH"><out/><retval/></param></function><function name="pluginConfigDir" invoke_kind="propertyget"><documentation>Plugin directory of Notepad++.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="nppDir" invoke_kind="propertyget"><documentation>Directory of Notepad++.</documentation><param name="result" kind="required" typedesc="VT_BSTR"><out/><retval/></param></function><function name="tabBarHidden" invoke_kind="propertyget"><documentation>Value indicating whether the tab bar is hidden.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><out/><retval/></param></function><function name="tabBarHidden" invoke_kind="propertyput"><documentation>Value indicating whether the tab bar is hidden.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><in/></param></function><function name="toolBarHidden" invoke_kind="propertyget"><documentation>Value indicating whether the tool bar is hidden.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><out/><retval/></param></function><function name="toolBarHidden" invoke_kind="propertyput"><documentation>Value indicating whether the tool bar is hidden.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><in/></param></function><function name="menuHidden" invoke_kind="propertyget"><documentation>Value indicating whether the main menu is hidden.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><out/><retval/></param></function><function name="menuHidden" invoke_kind="propertyput"><documentation>Value indicating whether the main menu is hidden.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><in/></param></function><function name="statusBarHidden" invoke_kind="propertyget"><documentation>Value indicating whether the status bar is hidden.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><out/><retval/></param></function><function name="statusBarHidden" invoke_kind="propertyput"><documentation>Value indicating whether the status bar is hidden.</documentation><param name="result" kind="required" typedesc="VT_BOOL"><in/></param></function><function name="open" invoke_kind="func"><documentation>Opens the file specified by the given file path.</documentation><param name="filePath" kind="required" typedesc="VT_BSTR"><in/></param></function><function name="addMenu" invoke_kind="func"><documentation>Appends new menu to the main window. Returns object representing the new menu. See IMenu.addMenu about cfg.</documentation><param name="cfg" kind="required" typedesc="VT_VARIANT"><in/></param><param name="result" kind="required" typedesc="IMenu"><out/><retval/></param></function><function name="runMenuCmd" invoke_kind="func"><documentation>Runs a specified build-in menu command of Notepad++.</documentation><param name="cmd" kind="required" typedesc="VT_INT"><in/></param></function><function name="setListener" invoke_kind="func"><documentation>Sets new listener object with a lot of callback functions representing event handler. See start.js</documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param></function><function name="createDockable" invoke_kind="func"><documentation>Creates new dockable window described by cfg object. cfg = {name:'Tab name', docking:'(top|bottom|left|right|floating)', onbeforeclose:function(){return true; // false - hides the window, but avoids its destroing }, onclose:function(){}}.</documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param><param name="result" kind="required" typedesc="IDialog"><out/><retval/></param></function><function name="handle" invoke_kind="propertyget"><documentation>Window handle of Editor.</documentation><param name="result" kind="required" typedesc="VT_INT"><out/><retval/></param></function><function name="addHotKey" invoke_kind="func"><documentation>Adds new application wide hot key combination. For cfg see addSystemHotKey method.</documentation><param name="cfg" kind="required" typedesc="VT_DISPATCH"><in/></param></function><function name="createContextMenu" invoke_kind="func"><documentation>Creates an empty context menu. cfg = {oninitpopup:function(){}}</documentation><param name="cfg" kind="required" typedesc="VT_VARIANT"><in/></param><param name="result" kind="required" typedesc="ICtxMenu"><out/><retval/></param></function></type></TypeLibrary>
